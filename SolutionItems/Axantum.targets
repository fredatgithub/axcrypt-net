<?xml version="1.0" encoding="utf-8"?>
<!--
/*
 * AxCrypt - Copyright 2012, Svante Seleborg, All Rights Reserved
 *
 * This file is part of AxCrypt.
 *
 * AxCrypt is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * AxCrypt is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with AxCrypt.  If not, see <http://www.gnu.org/licenses />.
 *
 * The source is maintained at http://bitbucket.org/axantum/axcrypt-net please visit for
 * updates, contributions and contact with the author. You may also visit
 * http://www.axantum.com for more information about the author.
 */
-->

<!--
    When this file is modified, close and re-open the solution to have Visual Studio recognize the change.

    The encrypted private key file is part of the distribution, but is protected with a private password.
    In Axantum build environment, the private key is loaded into a key-container, defined by Visual Studio
    to be named VS_KEY_xxxxxxxxx, and resolved by $(KeyContainerName) . For a private build, you may need
    to create your own key pair, or disable assembly strong naming. Also, for Visual Studio to handle the
    key-container, you need to have KeyOriginatorFile set before loading Microsoft.CSharp.targets. An easy
    way to achieve this is to use properties, enable Signing, select AxantumStrongName.pfx, then disable
    signing. The KeyOriginatorFile property remains set, shown by being grey in the GUI. Go figure.

    The Microsoft build files are typically found at:
    C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.CSharp.targets
    C:\Windows\Microsoft.NET\Framework\v4.0.30319\Microsoft.Common.targets
-->
<Project ToolsVersion="4.0"
         DefaultTargets="Build"
         xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
    <PropertyGroup>
        <_AxCryptMajor>2</_AxCryptMajor>
        <_AxCryptMinor>0</_AxCryptMinor>
    </PropertyGroup>
    <PropertyGroup>
        <_AxIsAxantumDeveloper>false</_AxIsAxantumDeveloper>
        <_AxIsAxantumDeveloper Condition=" '$(AX_AXANTUM)' == 'True' ">true</_AxIsAxantumDeveloper>
        <_AxIsAxantumBuildServer>false</_AxIsAxantumBuildServer>
        <_AxIsAxantumBuildServer Condition=" '$(COMPUTERNAME)' == 'HARLAN' ">true</_AxIsAxantumBuildServer>
        <_AxIsAxantum>false</_AxIsAxantum>
        <_AxIsAxantum Condition=" '$(_AxIsAxantumDeveloper)' == 'true' Or '$(_AxIsAxantumBuildServer)' == 'true' ">true</_AxIsAxantum>
        <_AxSignToolPath>..\SolutionItems\signtool.exe</_AxSignToolPath>
        <_AxIsAxantumBuild>true</_AxIsAxantumBuild>
        <_AxBuildserverDistinguishingPath>C:\Build</_AxBuildserverDistinguishingPath>
        <_AxIsBuildServerBuild>false</_AxIsBuildServerBuild>
        <_AxIsBuildServerBuild Condition=" Exists('$(_AxBuildserverDistinguishingPath)') ">true</_AxIsBuildServerBuild>
        <_AxTimeStampUrl>http://timestamp.comodoca.com/authenticode</_AxTimeStampUrl>
        <_AxCertificateThumbprint>f19b4539765c80c0a1e56586132b06d5a96a2400</_AxCertificateThumbprint>
    </PropertyGroup>
    <PropertyGroup>
        <UseHostCompilerIfAvailable>false</UseHostCompilerIfAvailable>
    </PropertyGroup>
    <PropertyGroup Condition=" '$(_AxIsBuildServerBuild)' == 'true' ">
        <_AxIgnoreSignToolErrors>false</_AxIgnoreSignToolErrors>
    </PropertyGroup>

    <PropertyGroup Condition=" '$(_AxIsBuildServerBuild)' == 'false' ">
        <_AxIgnoreSignToolErrors>true</_AxIgnoreSignToolErrors>
    </PropertyGroup>

    <!-- Use the parameter AxAuthenticodeFile to determine the file name. -->
    <Target Name="AxAuthenticodeSignOneFile">
        <Exec Command="&quot;$(_AxSignToolPath)&quot; sign /sha1 $(_AxCertificateThumbprint) /sm /v /t &quot;$(_AxTimeStampUrl)&quot; &quot;$(AxAuthenticodeFile)&quot; &gt;nul"
              Condition=" '$(Configuration)' == 'Release' And Exists('$(_AxSignToolPath)') "
              ContinueOnError="true">
            <Output TaskParameter="ExitCode"
                    PropertyName="_AxExitCode" />
        </Exec>
        <!-- Retry once if there's an error we're not ignoring errors-->
        <Exec Command="&quot;$(_AxSignToolPath)&quot; sign /sha1 $(_AxCertificateThumbprint) /sm /v /t &quot;$(_AxTimeStampUrl)&quot; &quot;$(AxAuthenticodeFile)&quot; &gt;nul"
              Condition=" '$(Configuration)' == 'Release' And Exists('$(_AxSignToolPath)') And '$(_AxExitCode)' != '0' And '$(_AxIgnoreSignToolErrors)' == 'false' "
              ContinueOnError="true">
            <Output TaskParameter="ExitCode"
                    PropertyName="_AxExitCode" />
        </Exec>
        <!-- Retry again if there's an error we're not ignoring errors-->
        <Exec Command="&quot;$(_AxSignToolPath)&quot; sign /sha1 $(_AxCertificateThumbprint) /sm /v /t &quot;$(_AxTimeStampUrl)&quot; &quot;$(AxAuthenticodeFile)&quot; &gt;nul"
              Condition=" '$(Configuration)' == 'Release' And Exists('$(_AxSignToolPath)') And '$(_AxExitCode)' != '0' And '$(_AxIgnoreSignToolErrors)' == 'false' "
              ContinueOnError="true">
            <Output TaskParameter="ExitCode"
                    PropertyName="_AxExitCode" />
        </Exec>
        <!-- Really fail if we're still in error, and we're not ignoring errors. -->
        <Error Text="Authenticode signing failed even after three retries."
               Condition=" '$(_AxExitCode)' != 0 And '$(_AxIgnoreSignToolErrors)' == 'false' " />
        <Message Text="$(MSBuildProjectName) -> Authenticode signed $(AxAuthenticodeFile)"
                 Importance="high" />
    </Target>

    <UsingTask TaskName="HgVersionFile"
               AssemblyFile="..\SolutionItems\MSBuildVersioning.dll" />
    <UsingTask TaskName="HgVersionInformation"
               AssemblyFile="..\SolutionItems\MSBuildVersioning.dll" />

    <Target Name="_AxMergeAndSign"
            Inputs="$(MSBuildProjectFullPath);@(MainAssembly);@(IlmergeAssemblies)"
            Outputs="$(OutputPath)AxCrypt.exe;$(OutputPath)AxCrypt.pdb"
            Condition=" '$(Configuration)' == 'Release' And '$(OutputType)' == 'Winexe' And '$(KeyContainerName)' != '' And '$(SignAssembly)' == 'true' ">
        <Exec Command="&quot;..\SolutionItems\Ilmerge.exe&quot; /delaysign /keyfile:..\SolutionItems\AxantumStrongName.pub /attr:&quot;@(MainAssembly)&quot; /targetplatform:v4,&quot;$(ProgramFiles)\Reference Assemblies\Microsoft\Framework\.NETFramework\v4.0\Profile\Client&quot; /out:&quot;$(OutputPath)AxCrypt.exe&quot; &quot;@(MainAssembly)&quot; @(IlmergeAssemblies->'&quot;%(FullPath)&quot;', ' ')" />
        <Exec Command="&quot;..\SolutionItems\sn.exe&quot; -Rca &quot;$(OutputPath)AxCrypt.exe&quot; $(KeyContainerName)" />
        <MSBuild Projects="$(MSBuildProjectFullPath)"
                 Targets="AxAuthenticodeSignOneFile"
                 Properties="AxAuthenticodeFile=$(OutputPath)AxCrypt.exe" />
        <ItemGroup>
            <FileWrites Include="$(OutputPath)AxCrypt.exe" />
            <FileWrites Include="$(OutputPath)AxCrypt.pdb" />
        </ItemGroup>
    </Target>

    <Target Name="_AxSetRevisionFromSourceControl">
        <HgVersionInformation IgnoreToolNotFound="true">
            <Output TaskParameter="Revision"
                    PropertyName="_AxSourceControlRevision" />
            <Output TaskParameter="Dirty"
                    PropertyName="_AxSourceControlDirty" />
        </HgVersionInformation>
        <PropertyGroup Condition=" '$(_AxSourceControlRevision)' != '' ">
            <_AxVersionedFileName>AxCrypt-$(_AxCryptMajor).$(_AxCryptMinor).$(_AxSourceControlRevision).$(_AxSourceControlDirty).exe</_AxVersionedFileName>
        </PropertyGroup>
    </Target>

    <Target Name="_AxCopyToVersionedFileName"
            Inputs="$(OutputPath)AxCrypt.exe"
            Outputs="$(OutputPath)$(_AxVersionedFileName)"
            Condition=" '$(_AxVersionedFileName)' != '' ">
        <Copy SourceFiles="$(OutputPath)AxCrypt.exe"
              DestinationFiles="$(OutputPath)$(_AxVersionedFileName)"
              SkipUnchangedFiles="true" />
        <ItemGroup>
            <FileWrites Include="$(OutputPath)$(_AxVersionedFileName)" />
        </ItemGroup>
    </Target>

    <Target Name="_AxSetRevisionAndCopyToVersionedFileName"
            DependsOnTargets="_AxSetRevisionFromSourceControl;_AxCopyToVersionedFileName"
            Condition=" '$(Configuration)' == 'Release' And '$(OutputType)' == 'Winexe' And '$(KeyContainerName)' != '' And '$(SignAssembly)' == 'true' ">
    </Target>

    <Target Name="_AxFindIlMergeAssemblies">
        <CreateItem Include="@(ReferencePath)"
                    Condition="'%(CopyLocal)'=='true'">
            <Output TaskParameter="Include"
                    ItemName="IlmergeAssemblies" />
        </CreateItem>
    </Target>

    <Target Name="_AxFixupVersion"
            Inputs="Properties\AssemblyInfo.template;$(MSBuildProjectFullPath)"
            Outputs="$(IntermediateOutputPath)\AssemblyInfo.cs"
            Condition=" Exists('Properties\AssemblyInfo.template') ">
        <MakeDir Directories="$(IntermediateOutputPath)" />
        <HgVersionFile TemplateFile="Properties\AssemblyInfo.template"
                       DestinationFile="$(IntermediateOutputPath)\AssemblyInfo.cs"
                       IgnoreToolNotFound="true" />
        <ItemGroup>
            <Compile Include="$(IntermediateOutputPath)\AssemblyInfo.cs" />
            <FileWrites Include="$(IntermediateOutputPath)\AssemblyInfo.cs" />
        </ItemGroup>
    </Target>

    <Target Name="_AxFixupAssemblyStrongNaming"
            Condition=" '$(KeyContainerName)' == '' And '$(KeyOriginatorFile)' == 'AxantumStrongName.pfx' ">
        <PropertyGroup>
            <KeyOriginatorFile></KeyOriginatorFile>
            <SignAssembly>false</SignAssembly>
        </PropertyGroup>
    </Target>

    <Target Name="_AxBeforeBuild"
            DependsOnTargets="_AxFixupVersion">
        <PropertyGroup Condition=" '$(_AxIsAxantum)' == 'true' ">
            <_AxPreviousDefineConstants>$(DefineConstants)</_AxPreviousDefineConstants>
            <DefineConstants>$(DefineConstants);AXANTUM</DefineConstants>
        </PropertyGroup>
    </Target>

    <Target Name="_AxAfterBuild">
        <PropertyGroup Condition=" '$(_AxIsAxantum)' == 'true' ">
            <DefineConstants>$(_AxPreviousDefineConstants)</DefineConstants>
        </PropertyGroup>
    </Target>

    <Target Name="_AxPrepareForRun"
            DependsOnTargets="_AxFindIlMergeAssemblies;_AxMergeAndSign;_AxSetRevisionAndCopyToVersionedFileName">
    </Target>

    <Target Name="_AxSetupStrongNaming"
            Condition=" '$(_AxIsAxantum)' == 'true' ">
        <PropertyGroup>
            <KeyOriginatorFile>AxantumStrongName.pfx</KeyOriginatorFile>
            <SignAssembly>true</SignAssembly>
        </PropertyGroup>
    </Target>

    <Target Name="_AxCheckBuildEnvironment">
    </Target>

    <PropertyGroup Condition=" '$(_AxIsAxantum)' == 'true' ">
        <CoreBuildDependsOn>
            _AxCheckBuildEnvironment;
            _AxSetupStrongNaming;
            $(CoreBuildDependsOn)
        </CoreBuildDependsOn>
        <BuildDependsOn>
            _AxBeforeBuild;
            $(BuildDependsOn);
            _AxAfterBuild
        </BuildDependsOn>
        <PrepareForRunDependsOn>
            $(PrepareForRunDependsOn);
            _AxPrepareForRun
        </PrepareForRunDependsOn>
    </PropertyGroup>

    <Target Name="BeforeCompile"
            DependsOnTargets="_AxFixupAssemblyStrongNaming">
    </Target>
</Project>